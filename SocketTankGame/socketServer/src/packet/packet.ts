/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.9
 * source: packet.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace tankio {
    export enum MSGID {
        S_ENTER = 0,
        S_INIT = 1,
        C_ENTER = 2,
        S_INITLIST = 3,
        C_MOVE = 4,
        S_PLAYERLIST = 5,
        S_LEAVE = 6,
        C_FIRE = 7,
        S_FIRE = 8
    }
    export class Position extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rotate?: number;
            x?: number;
            y?: number;
            turretRotate?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rotate" in data && data.rotate != undefined) {
                    this.rotate = data.rotate;
                }
                if ("x" in data && data.x != undefined) {
                    this.x = data.x;
                }
                if ("y" in data && data.y != undefined) {
                    this.y = data.y;
                }
                if ("turretRotate" in data && data.turretRotate != undefined) {
                    this.turretRotate = data.turretRotate;
                }
            }
        }
        get rotate() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set rotate(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get x() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set x(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get y() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set y(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get turretRotate() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set turretRotate(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            rotate?: number;
            x?: number;
            y?: number;
            turretRotate?: number;
        }): Position {
            const message = new Position({});
            if (data.rotate != null) {
                message.rotate = data.rotate;
            }
            if (data.x != null) {
                message.x = data.x;
            }
            if (data.y != null) {
                message.y = data.y;
            }
            if (data.turretRotate != null) {
                message.turretRotate = data.turretRotate;
            }
            return message;
        }
        toObject() {
            const data: {
                rotate?: number;
                x?: number;
                y?: number;
                turretRotate?: number;
            } = {};
            if (this.rotate != null) {
                data.rotate = this.rotate;
            }
            if (this.x != null) {
                data.x = this.x;
            }
            if (this.y != null) {
                data.y = this.y;
            }
            if (this.turretRotate != null) {
                data.turretRotate = this.turretRotate;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.rotate != 0)
                writer.writeFloat(1, this.rotate);
            if (this.x != 0)
                writer.writeFloat(2, this.x);
            if (this.y != 0)
                writer.writeFloat(3, this.y);
            if (this.turretRotate != 0)
                writer.writeFloat(4, this.turretRotate);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Position {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Position();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.rotate = reader.readFloat();
                        break;
                    case 2:
                        message.x = reader.readFloat();
                        break;
                    case 3:
                        message.y = reader.readFloat();
                        break;
                    case 4:
                        message.turretRotate = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Position {
            return Position.deserialize(bytes);
        }
    }
    export class PlayerInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            playerId?: number;
            name?: string;
            position?: Position;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("playerId" in data && data.playerId != undefined) {
                    this.playerId = data.playerId;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("position" in data && data.position != undefined) {
                    this.position = data.position;
                }
            }
        }
        get playerId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set playerId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get position() {
            return pb_1.Message.getWrapperField(this, Position, 3) as Position;
        }
        set position(value: Position) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_position() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            playerId?: number;
            name?: string;
            position?: ReturnType<typeof Position.prototype.toObject>;
        }): PlayerInfo {
            const message = new PlayerInfo({});
            if (data.playerId != null) {
                message.playerId = data.playerId;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.position != null) {
                message.position = Position.fromObject(data.position);
            }
            return message;
        }
        toObject() {
            const data: {
                playerId?: number;
                name?: string;
                position?: ReturnType<typeof Position.prototype.toObject>;
            } = {};
            if (this.playerId != null) {
                data.playerId = this.playerId;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.position != null) {
                data.position = this.position.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.playerId != 0)
                writer.writeInt32(1, this.playerId);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.has_position)
                writer.writeMessage(3, this.position, () => this.position.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlayerInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlayerInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.playerId = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.position, () => message.position = Position.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PlayerInfo {
            return PlayerInfo.deserialize(bytes);
        }
    }
    export class S_Init extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            playerId?: number;
            spawnPosition?: Position;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("playerId" in data && data.playerId != undefined) {
                    this.playerId = data.playerId;
                }
                if ("spawnPosition" in data && data.spawnPosition != undefined) {
                    this.spawnPosition = data.spawnPosition;
                }
            }
        }
        get playerId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set playerId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get spawnPosition() {
            return pb_1.Message.getWrapperField(this, Position, 2) as Position;
        }
        set spawnPosition(value: Position) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_spawnPosition() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            playerId?: number;
            spawnPosition?: ReturnType<typeof Position.prototype.toObject>;
        }): S_Init {
            const message = new S_Init({});
            if (data.playerId != null) {
                message.playerId = data.playerId;
            }
            if (data.spawnPosition != null) {
                message.spawnPosition = Position.fromObject(data.spawnPosition);
            }
            return message;
        }
        toObject() {
            const data: {
                playerId?: number;
                spawnPosition?: ReturnType<typeof Position.prototype.toObject>;
            } = {};
            if (this.playerId != null) {
                data.playerId = this.playerId;
            }
            if (this.spawnPosition != null) {
                data.spawnPosition = this.spawnPosition.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.playerId != 0)
                writer.writeInt32(1, this.playerId);
            if (this.has_spawnPosition)
                writer.writeMessage(2, this.spawnPosition, () => this.spawnPosition.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_Init {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new S_Init();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.playerId = reader.readInt32();
                        break;
                    case 2:
                        reader.readMessage(message.spawnPosition, () => message.spawnPosition = Position.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): S_Init {
            return S_Init.deserialize(bytes);
        }
    }
    export class C_Enter extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            position?: Position;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("position" in data && data.position != undefined) {
                    this.position = data.position;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get position() {
            return pb_1.Message.getWrapperField(this, Position, 2) as Position;
        }
        set position(value: Position) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_position() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            name?: string;
            position?: ReturnType<typeof Position.prototype.toObject>;
        }): C_Enter {
            const message = new C_Enter({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.position != null) {
                message.position = Position.fromObject(data.position);
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                position?: ReturnType<typeof Position.prototype.toObject>;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.position != null) {
                data.position = this.position.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.has_position)
                writer.writeMessage(2, this.position, () => this.position.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): C_Enter {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new C_Enter();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.position, () => message.position = Position.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): C_Enter {
            return C_Enter.deserialize(bytes);
        }
    }
    export class S_Enter extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            player?: PlayerInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("player" in data && data.player != undefined) {
                    this.player = data.player;
                }
            }
        }
        get player() {
            return pb_1.Message.getWrapperField(this, PlayerInfo, 1) as PlayerInfo;
        }
        set player(value: PlayerInfo) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_player() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            player?: ReturnType<typeof PlayerInfo.prototype.toObject>;
        }): S_Enter {
            const message = new S_Enter({});
            if (data.player != null) {
                message.player = PlayerInfo.fromObject(data.player);
            }
            return message;
        }
        toObject() {
            const data: {
                player?: ReturnType<typeof PlayerInfo.prototype.toObject>;
            } = {};
            if (this.player != null) {
                data.player = this.player.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_player)
                writer.writeMessage(1, this.player, () => this.player.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_Enter {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new S_Enter();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.player, () => message.player = PlayerInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): S_Enter {
            return S_Enter.deserialize(bytes);
        }
    }
    export class C_Move extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            playerID?: number;
            position?: Position;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("playerID" in data && data.playerID != undefined) {
                    this.playerID = data.playerID;
                }
                if ("position" in data && data.position != undefined) {
                    this.position = data.position;
                }
            }
        }
        get playerID() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set playerID(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get position() {
            return pb_1.Message.getWrapperField(this, Position, 2) as Position;
        }
        set position(value: Position) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_position() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            playerID?: number;
            position?: ReturnType<typeof Position.prototype.toObject>;
        }): C_Move {
            const message = new C_Move({});
            if (data.playerID != null) {
                message.playerID = data.playerID;
            }
            if (data.position != null) {
                message.position = Position.fromObject(data.position);
            }
            return message;
        }
        toObject() {
            const data: {
                playerID?: number;
                position?: ReturnType<typeof Position.prototype.toObject>;
            } = {};
            if (this.playerID != null) {
                data.playerID = this.playerID;
            }
            if (this.position != null) {
                data.position = this.position.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.playerID != 0)
                writer.writeInt32(1, this.playerID);
            if (this.has_position)
                writer.writeMessage(2, this.position, () => this.position.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): C_Move {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new C_Move();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.playerID = reader.readInt32();
                        break;
                    case 2:
                        reader.readMessage(message.position, () => message.position = Position.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): C_Move {
            return C_Move.deserialize(bytes);
        }
    }
    export class S_PlayerList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            players?: PlayerInfo[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("players" in data && data.players != undefined) {
                    this.players = data.players;
                }
            }
        }
        get players() {
            return pb_1.Message.getRepeatedWrapperField(this, PlayerInfo, 1) as PlayerInfo[];
        }
        set players(value: PlayerInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            players?: ReturnType<typeof PlayerInfo.prototype.toObject>[];
        }): S_PlayerList {
            const message = new S_PlayerList({});
            if (data.players != null) {
                message.players = data.players.map(item => PlayerInfo.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                players?: ReturnType<typeof PlayerInfo.prototype.toObject>[];
            } = {};
            if (this.players != null) {
                data.players = this.players.map((item: PlayerInfo) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.players.length)
                writer.writeRepeatedMessage(1, this.players, (item: PlayerInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_PlayerList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new S_PlayerList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.players, () => pb_1.Message.addToRepeatedWrapperField(message, 1, PlayerInfo.deserialize(reader), PlayerInfo));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): S_PlayerList {
            return S_PlayerList.deserialize(bytes);
        }
    }
    export class S_InitList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            players?: PlayerInfo[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("players" in data && data.players != undefined) {
                    this.players = data.players;
                }
            }
        }
        get players() {
            return pb_1.Message.getRepeatedWrapperField(this, PlayerInfo, 1) as PlayerInfo[];
        }
        set players(value: PlayerInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            players?: ReturnType<typeof PlayerInfo.prototype.toObject>[];
        }): S_InitList {
            const message = new S_InitList({});
            if (data.players != null) {
                message.players = data.players.map(item => PlayerInfo.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                players?: ReturnType<typeof PlayerInfo.prototype.toObject>[];
            } = {};
            if (this.players != null) {
                data.players = this.players.map((item: PlayerInfo) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.players.length)
                writer.writeRepeatedMessage(1, this.players, (item: PlayerInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_InitList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new S_InitList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.players, () => pb_1.Message.addToRepeatedWrapperField(message, 1, PlayerInfo.deserialize(reader), PlayerInfo));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): S_InitList {
            return S_InitList.deserialize(bytes);
        }
    }
    export class C_Fire extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            playerId?: number;
            x?: number;
            y?: number;
            z?: number;
            dirX?: number;
            dirY?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("playerId" in data && data.playerId != undefined) {
                    this.playerId = data.playerId;
                }
                if ("x" in data && data.x != undefined) {
                    this.x = data.x;
                }
                if ("y" in data && data.y != undefined) {
                    this.y = data.y;
                }
                if ("z" in data && data.z != undefined) {
                    this.z = data.z;
                }
                if ("dirX" in data && data.dirX != undefined) {
                    this.dirX = data.dirX;
                }
                if ("dirY" in data && data.dirY != undefined) {
                    this.dirY = data.dirY;
                }
            }
        }
        get playerId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set playerId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get x() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set x(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get y() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set y(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get z() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set z(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get dirX() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set dirX(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get dirY() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set dirY(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            playerId?: number;
            x?: number;
            y?: number;
            z?: number;
            dirX?: number;
            dirY?: number;
        }): C_Fire {
            const message = new C_Fire({});
            if (data.playerId != null) {
                message.playerId = data.playerId;
            }
            if (data.x != null) {
                message.x = data.x;
            }
            if (data.y != null) {
                message.y = data.y;
            }
            if (data.z != null) {
                message.z = data.z;
            }
            if (data.dirX != null) {
                message.dirX = data.dirX;
            }
            if (data.dirY != null) {
                message.dirY = data.dirY;
            }
            return message;
        }
        toObject() {
            const data: {
                playerId?: number;
                x?: number;
                y?: number;
                z?: number;
                dirX?: number;
                dirY?: number;
            } = {};
            if (this.playerId != null) {
                data.playerId = this.playerId;
            }
            if (this.x != null) {
                data.x = this.x;
            }
            if (this.y != null) {
                data.y = this.y;
            }
            if (this.z != null) {
                data.z = this.z;
            }
            if (this.dirX != null) {
                data.dirX = this.dirX;
            }
            if (this.dirY != null) {
                data.dirY = this.dirY;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.playerId != 0)
                writer.writeInt32(1, this.playerId);
            if (this.x != 0)
                writer.writeFloat(2, this.x);
            if (this.y != 0)
                writer.writeFloat(3, this.y);
            if (this.z != 0)
                writer.writeFloat(4, this.z);
            if (this.dirX != 0)
                writer.writeFloat(5, this.dirX);
            if (this.dirY != 0)
                writer.writeFloat(6, this.dirY);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): C_Fire {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new C_Fire();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.playerId = reader.readInt32();
                        break;
                    case 2:
                        message.x = reader.readFloat();
                        break;
                    case 3:
                        message.y = reader.readFloat();
                        break;
                    case 4:
                        message.z = reader.readFloat();
                        break;
                    case 5:
                        message.dirX = reader.readFloat();
                        break;
                    case 6:
                        message.dirY = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): C_Fire {
            return C_Fire.deserialize(bytes);
        }
    }
    export class S_Fire extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            playerId?: number;
            fireId?: number;
            x?: number;
            y?: number;
            z?: number;
            dirX?: number;
            dirY?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("playerId" in data && data.playerId != undefined) {
                    this.playerId = data.playerId;
                }
                if ("fireId" in data && data.fireId != undefined) {
                    this.fireId = data.fireId;
                }
                if ("x" in data && data.x != undefined) {
                    this.x = data.x;
                }
                if ("y" in data && data.y != undefined) {
                    this.y = data.y;
                }
                if ("z" in data && data.z != undefined) {
                    this.z = data.z;
                }
                if ("dirX" in data && data.dirX != undefined) {
                    this.dirX = data.dirX;
                }
                if ("dirY" in data && data.dirY != undefined) {
                    this.dirY = data.dirY;
                }
            }
        }
        get playerId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set playerId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get fireId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set fireId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get x() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set x(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get y() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set y(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get z() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set z(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get dirX() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set dirX(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get dirY() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set dirY(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            playerId?: number;
            fireId?: number;
            x?: number;
            y?: number;
            z?: number;
            dirX?: number;
            dirY?: number;
        }): S_Fire {
            const message = new S_Fire({});
            if (data.playerId != null) {
                message.playerId = data.playerId;
            }
            if (data.fireId != null) {
                message.fireId = data.fireId;
            }
            if (data.x != null) {
                message.x = data.x;
            }
            if (data.y != null) {
                message.y = data.y;
            }
            if (data.z != null) {
                message.z = data.z;
            }
            if (data.dirX != null) {
                message.dirX = data.dirX;
            }
            if (data.dirY != null) {
                message.dirY = data.dirY;
            }
            return message;
        }
        toObject() {
            const data: {
                playerId?: number;
                fireId?: number;
                x?: number;
                y?: number;
                z?: number;
                dirX?: number;
                dirY?: number;
            } = {};
            if (this.playerId != null) {
                data.playerId = this.playerId;
            }
            if (this.fireId != null) {
                data.fireId = this.fireId;
            }
            if (this.x != null) {
                data.x = this.x;
            }
            if (this.y != null) {
                data.y = this.y;
            }
            if (this.z != null) {
                data.z = this.z;
            }
            if (this.dirX != null) {
                data.dirX = this.dirX;
            }
            if (this.dirY != null) {
                data.dirY = this.dirY;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.playerId != 0)
                writer.writeInt32(1, this.playerId);
            if (this.fireId != 0)
                writer.writeInt32(2, this.fireId);
            if (this.x != 0)
                writer.writeFloat(3, this.x);
            if (this.y != 0)
                writer.writeFloat(4, this.y);
            if (this.z != 0)
                writer.writeFloat(5, this.z);
            if (this.dirX != 0)
                writer.writeFloat(6, this.dirX);
            if (this.dirY != 0)
                writer.writeFloat(7, this.dirY);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_Fire {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new S_Fire();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.playerId = reader.readInt32();
                        break;
                    case 2:
                        message.fireId = reader.readInt32();
                        break;
                    case 3:
                        message.x = reader.readFloat();
                        break;
                    case 4:
                        message.y = reader.readFloat();
                        break;
                    case 5:
                        message.z = reader.readFloat();
                        break;
                    case 6:
                        message.dirX = reader.readFloat();
                        break;
                    case 7:
                        message.dirY = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): S_Fire {
            return S_Fire.deserialize(bytes);
        }
    }
}
